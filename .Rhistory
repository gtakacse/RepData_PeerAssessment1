intall.packages("HistData")
install.packages("HistData")
HistData
read("HistData")
ls
read.csv("https://data.mo.gov/api/views/yprw-7jqu/rows.csv?accessType=DOWNLOAD")
read.table(file=”C:\Users\ASUS\Documents\Statistics with R\List_P_3D_data.csv”, header = T, sep=”;”, fill=T)
read.table(file="C:\Users\ASUS\Documents\Statistics with R\List_P_3D_data.csv", header = T, sep=”;”, fill=T)
read.table(file="List_P_3D_data.csv", header = T, sep=”;”, fill=T)
read.table(file="List_P_3D_data.csv", header = T, sep=";", fill=T)
data()
data(ability.cov)
read.table(ability.cov)
read.table("ability.cov")
mydata <- read.csv("List_P_3D_data.csv")
mydata <- read.csv("attitude")
ls()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
ls()
mydata
ability.cov
mydata <- ability.cov
mydata
library()
library(HistData)
HistData
ls()
data("HistData")
import("HistData")
import.package("HistData")
import.packages("HistData")
test <- read.csv("https://courses.edx.org/c4x/KIx/KIexploRx/asset/List_P_3D_data.csv")
library()
test <- read.table(file="HistData", header = T, sep = ";")
test <- read.table(file="C:/Users/ASUS/Documents/Statistics with R/List_P_3D_data.csv", header = T, sep = ";")
test
q()
library(datasets)
data(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
hp <-with(mtcars, tapply(hp, cyl, mean))
hp["8"]-hp["4"]
data(iris)
apply(iris[, 1:4], 2, mean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVecto
makeVector
makeVector(5)
cackemean
cachemean
cachemean([1,2])
cachemean(x)
cachemean(5)
makeVector(c(1,2,3,4))
makeVector(c(1,2,3,4))
a <-makeVector(c(1,2,3,4))
a$get
a$get()
a$getmean()
chasemean(a)
cashemean(a)
cachemean(a)
a$set(c(10,20,30,40))
a$get()
cachemean(a)
cachemean(a)
cachemean(a)
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
h8 <- hilbert(8); h8
sh8 <- solve(h8)
round(sh8 %*% h8, 3)
sh8
## The purpose of the functions is to calculate and store the inverse
## values of a matrix
## Function that creates a matrix and initializes its inverse
makeCacheMatrix <- function(x = matrix()) {
##initializing the inverve value with NULL in the global envirionment
inv <- NULL
##setting the values of the matrix in the global environment
set <- function(y) {
x <<- y
inv <<- NULL
}
##function for getting the values in the matrix
get <- function() x
## function for setting the inverse of the matrix
setInverse <- function(inverse) inv <<- inverse
##function for retreiving inverse matrix from the cache
getInverse <- function() inv
}
## Function the calculates the inverse of a matrix if the matrix's inverse
## cannot be looked up in the cache
cacheSolve <- function(x, ...) {
## check whether the inverse is in the cache
inv <- x$getInverse()
## if it was calculated before, return the stored inverse values
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
## if it wasn't calculated before, calculate it and store it for later use
data <- x$get()
##calculate the inverse of the matrix
inv <- solve(data, ...)
## store the value in the cache
x$setInverse(inv)
## Return the inverse matrix
inv
}
install.packages("devtools")
install_github("genomicsclass/dagdata")
install_github("genomicsclass/dagdata")
library(devtools)
install_github("genomicsclass/dagdata")
install_github("ririzarr/rafalib")
setwd("~/Data_Analysis_with_R_JHU/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
library(plyr)
sum_tbl <-activity %>%
group_by(date) %>%
summarise(total_steps=sum(steps))
require(dplyr)
sum_tbl <-activity %>%
group_by(date) %>%
summarise(total_steps=sum(steps))
steps_new <- activity$steps
naInd <- which(is.na(steps_new))
for (i in naInd){
#find matching value in the summary table and replace it
steps_new[i] <-sum_tbl2$stepsPerInt[which(sum_tbl2$interval==activity$interval[i])]
}
#check that all the NAs removed
sum(is.na(steps_new))
sum_tbl2 <- activity %>%
group_by(interval) %>%
summarise(stepsPerInt=mean(steps, na.rm=T))
steps_new <- activity$steps
naInd <- which(is.na(steps_new))
for (i in naInd){
#find matching value in the summary table and replace it
steps_new[i] <-sum_tbl2$stepsPerInt[which(sum_tbl2$interval==activity$interval[i])]
}
sum(is.na(steps_new))
new.df <- cbind(steps_new, activity[,2:3])
steps.new <-new.df %>%
group_by(date) %>%
summarise(total_steps=sum(steps))
nw.steps.per.day <-new.df %>%
group_by(date) %>%
summarise(total_steps=sum(steps_new))
hist(nw.steps.per.day)
hist(nw.steps.per.day$total_steps)
hist(nw.steps.per.day$total_steps, breaks=10)
windows()
sum_tbl$total_steps
hist(sum_tbl$total_steps)
hist(sum_tbl$total_steps, breaks=10)
mean(sum_tbl$total_steps, na.rm=T)
mean(nw.steps.per.day$total_steps)
mean(nw.steps.per.day$total_steps)
median(nw.steps.per.day$total_steps)
median(sum_tbl$total_steps, na.rm=T)
?weekdays
activity$date <- as.Date(activity$date, "%Y-%m-%d")
?weekday
weekdays(activity$date[1])
weekdays(activity$date[2])
weekend(activity$date[1])
weekends(activity$date[1])
weekdays(activity$date[17000])
unique(activity$date)
Sys.setlocale("LC_TIME","English United States")
Sys.setlocale("LC_TIME", "en_US")
weekdays(activity$date[17000])
Sys.setlocale("LC_TIME", "English")
weekdays(activity$date[17000])
w.factor <- activity$date == "Saturday" || activity$date == "Sunday"
w.factor <- activity$date == "Saturday" | activity$date == "Sunday"
w.factor <- activity$date == "Saturday"
w.factor <- weekdays(activity$date) == "Saturday" || weekdays(activity$date) == "Sunday"
sum(w.factor)
w.factor <- weekdays(activity$date) == "Saturday"
sum(w.factor)
w.factor <- weekdays(activity$date) == "Saturday" | "Sunday"
w.factor <- weekdays(activity$date) == "Saturday" || "Sunday"
w.factor <- weekdays(activity$date) == "Saturday" || || weekdays(activity$date) == "Sunday"
w.factor <- weekdays(activity$date) == "Saturday" || weekdays(activity$date) == "Sunday"
sum(w.factor)
w.factor <- weekdays(activity$date) == "Saturday" | weekdays(activity$date) == "Sunday"
sum(w.factor)
length(w.factor)
str(w.factor)
activity$wday <- factor(w.factor, levels=c(0,1), labels=c("weekday", "weekend"))
head(activity)
w.factor
activity$wday <- as.factor(w.factor, levels=c(0,1), labels=c("weekday", "weekend"))
activity$wday <- factor(w.factor, levels=c(FALSE, TRUE), labels=c("weekday", "weekend"))
head(activity)
head(activity[1000,])
head(activity[10000,])
test <-activity %>%
group_by(wday,interval)%>%
summarise(total_steps=mean(steps, na.rm=T))
head(test)
tail(test)
unique(test$interval)
288*2
w.tbl <-activity %>%
group_by(wday,interval)%>%
summarise(total_steps=mean(steps, na.rm=T))
require(lattice)
xyplot(total_steps~interval|wday, type="l")
xyplot(total_steps~interval|wday, data=w.tbl type="l")
xyplot(total_steps~interval, group=wday, data=w.tbl type="l")
xyplot(w.tbl$total_steps~x.tbl$interval|w.tbl$wday, type="l")
xyplot(w.tbl$total_steps~w.tbl$interval|w.tbl$wday, type="l")
windows()
xyplot(w.tbl$total_steps~w.tbl$interval|w.tbl$wday, type="l", xlab="Intervals", ylab="Number of steps (mean)", main="Number of steps taken depending on the time of the week", layout=c(1,2))
length(unique(activity$date))
histogram(~nw.steps.per.day$total_steps, main="Number of steps taken during a day", xlab="Number of steps per day")
histogram(~nw.steps.per.day$total_steps, main="Number of steps taken during a day", xlab="Number of steps per day", col="blue")
histogram(~nw.steps.per.day$total_steps, main="Number of steps taken during a day", xlab="Number of steps per day", col="blue", breaks=10)
histogram(~nw.steps.per.day$total_steps, main="Number of steps taken during a day\nAfter missing values were replace by the interval average", xlab="Number of steps per day", col="blue", breaks=10)
histogram(~sum_tbl$total_steps, main="Number of steps taken during a day", xlab="Number of steps per day", col="blue", breaks=10)
sum_tbl
head(sum_tbl, 10)
xyplot(sum_tbl2$interval ~ sum_tbl2$stepsPerInt, type="l", main="Average daily activity pattern", xlab="Interval", ylab="Average number of steps")
windows()
xyplot(sum_tbl2$interval ~ sum_tbl2$stepsPerInt, type="l", main="Average daily activity pattern", xlab="Interval", ylab="Average number of steps")
xyplot(sum_tbl2$stepsPerInt~sum_tbl2$interval, type="l", main="Average daily activity pattern", xlab="Interval", ylab="Average number of steps")
sum_tbl2[which.max(sum_tbl2$stepsPerInt),]$interval
